{"version":3,"sources":["../yjs/node_modules/browser-pack/_prelude.js","node_modules/fast-diff/diff.js","src/Text.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","yText","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","diff_main","text1","text2","cursor_pos","DIFF_EQUAL","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","fix_cursor","DIFF_INSERT","DIFF_DELETE","longtext","shorttext","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_bisect_","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","x1","k1_offset","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","j","best_common","prefixLength","suffixLength","hm1","hm2","pointer","count_delete","count_insert","text_delete","text_insert","splice","pop","changes","cursor_normalize_diff","current_pos","next_pos","slice","split_pos","d_left","d_right","norm","ndiffs","cursor_pointer","d_next","merge_tuples","suffix","start","left_d","right_d","diff","INSERT","DELETE","EQUAL","extend","Y","requestModules","then","YText","_Y$Array$typeDefiniti","os","_model","_content","_classCallCheck","_this","_possibleConstructorReturn","__proto__","Object","getPrototypeOf","textfields","aceInstances","codeMirrorInstances","_inherits","_createClass","key","value","map","c","val","join","pos","content","_get","prototype","split","unbindTextareaAll","unbindAceAll","unbindCodeMirrorAll","codeMirrorInstance","findIndex","binding","editor","unobserve","yCallback","off","aceCallback","unbindCodeMirror","options","mutualExcluse","token","codeMirrorCallback","cm","indexFromPos","from","removed","delLength","delete","insert","text","event","posFromIndex","index","type","to","replaceRange","values","_to","setValue","toString","on","observe","aceInstance","unbindAce","aceDocument","getSession","getDocument","action","positionToIndex","lines","indexToPosition","_start","end","range","Range","row","column","remove","selection","clearSelection","aceClass","ace","aceRequire","arguments","Element","bindTextarea","apply","session","bindAce","bindCodeMirror","console","error","textarea","removeEventListener","eventListener","unbindTextarea","textfield","domRoot","oPos","fix","cursor","createRange","writeRange","getSelection","writeContent","getContent","selectionStart","setSelectionRange","left","right","selectionEnd","clength","textContent","anchorOffset","focusOffset","editedElement","focusNode","childNodes","isReal","textnode","max","document","setStart","setEnd","removeAllRanges","addRange","innerText","textfieldObserver","oldContent","addEventListener","unbindAll","typeDefinition","utils","CustomTypeDefinition","name","class","struct","initType","regeneratorRuntime","mark","YTextInitializer","model","wrap","_context","prev","next","delegateYield","Struct","List","op","hasOwnProperty","forEach","id","abrupt","stop","createType"],"mappings":";;;;;;CAAA,SAAAA,GAAA,GAAA,gBAAAC,UAAA,mBAAAC,QAAAA,OAAAD,QAAAD,QAAA,IAAA,kBAAAG,SAAAA,OAAAC,IAAAD,UAAAH,OAAA,CAAA,GAAAK,EAAAA,GAAA,mBAAAC,QAAAA,OAAA,mBAAAC,QAAAA,OAAA,mBAAAC,MAAAA,KAAAC,KAAAJ,EAAAK,MAAAV,MAAA,WAAA,MAAA,SAAAW,GAAAC,EAAAC,EAAAC,GAAA,QAAAC,GAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,GAAAE,GAAA,kBAAAC,UAAAA,OAAA,KAAAF,GAAAC,EAAA,MAAAA,GAAAF,GAAA,EAAA,IAAAI,EAAA,MAAAA,GAAAJ,GAAA,EAAA,IAAAhB,GAAA,GAAAqB,OAAA,uBAAAL,EAAA,IAAA,MAAAhB,GAAAsB,KAAA,mBAAAtB,EAAA,GAAAuB,GAAAV,EAAAG,IAAAf,WAAAW,GAAAI,GAAA,GAAAQ,KAAAD,EAAAtB,QAAA,SAAAU,GAAA,GAAAE,GAAAD,EAAAI,GAAA,GAAAL,EAAA,OAAAI,GAAAF,EAAAA,EAAAF,IAAAY,EAAAA,EAAAtB,QAAAU,EAAAC,EAAAC,EAAAC,GAAA,MAAAD,GAAAG,GAAAf,QAAA,IAAA,GAAAmB,GAAA,kBAAAD,UAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAW,OAAAT,IAAAD,EAAAD,EAAAE,GAAA,OAAAD,KAAAW,GAAA,SAAAP,EAAAjB,EAAAD,GC4CA,QAAA0B,GAAAC,EAAAC,EAAAC,GAEA,GAAAF,GAAAC,EACA,MAAAD,KACAG,EAAAH,QAMAE,EAAA,GAAAF,EAAAH,OAAAK,KACAA,EAAA,KAIA,IAAAE,GAAAC,EAAAL,EAAAC,GACAK,EAAAN,EAAAO,UAAA,EAAAH,EACAJ,GAAAA,EAAAO,UAAAH,GACAH,EAAAA,EAAAM,UAAAH,GAGAA,EAAAI,EAAAR,EAAAC,EACA,IAAAQ,GAAAT,EAAAO,UAAAP,EAAAH,OAAAO,EACAJ,GAAAA,EAAAO,UAAA,EAAAP,EAAAH,OAAAO,GACAH,EAAAA,EAAAM,UAAA,EAAAN,EAAAJ,OAAAO,EAGA,IAAAM,GAAAC,EAAAX,EAAAC,EAaA,OAVAK,IACAI,EAAAE,SAAAT,EAAAG,IAEAG,GACAC,EAAAG,MAAAV,EAAAM,IAEAK,EAAAJ,GACA,MAAAR,IACAQ,EAAAK,EAAAL,EAAAR,IAEAQ,EAWA,QAAAC,GAAAX,EAAAC,GACA,GAAAS,EAEA,KAAAV,EAEA,QAAAgB,EAAAf,GAGA,KAAAA,EAEA,QAAAgB,EAAAjB,GAGA,IAAAkB,GAAAlB,EAAAH,OAAAI,EAAAJ,OAAAG,EAAAC,EACAkB,EAAAnB,EAAAH,OAAAI,EAAAJ,OAAAI,EAAAD,EACAR,EAAA0B,EAAAE,QAAAD,EACA,IAAA3B,IAAA,EASA,MAPAkB,KAAAM,EAAAE,EAAAX,UAAA,EAAAf,KACAW,EAAAgB,IACAH,EAAAE,EAAAX,UAAAf,EAAA2B,EAAAtB,UAEAG,EAAAH,OAAAI,EAAAJ,SACAa,EAAA,GAAA,GAAAA,EAAA,GAAA,GAAAO,GAEAP,CAGA,IAAA,GAAAS,EAAAtB,OAGA,QAAAoB,EAAAjB,IAAAgB,EAAAf,GAIA,IAAAoB,GAAAC,EAAAtB,EAAAC,EACA,IAAAoB,EAAA,CAEA,GAAAE,GAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAM,EAAAN,EAAA,GAEAO,EAAA7B,EAAAwB,EAAAE,GACAI,EAAA9B,EAAAyB,EAAAE,EAEA,OAAAE,GAAAE,SAAA3B,EAAAwB,IAAAE,GAGA,MAAAE,GAAA/B,EAAAC,GAaA,QAAA8B,GAAA/B,EAAAC,GAWA,IAAA,GATA+B,GAAAhC,EAAAH,OACAoC,EAAAhC,EAAAJ,OACAqC,EAAAC,KAAAC,MAAAJ,EAAAC,GAAA,GACAI,EAAAH,EACAI,EAAA,EAAAJ,EACAK,EAAA,GAAAC,OAAAF,GACAG,EAAA,GAAAD,OAAAF,GAGAI,EAAA,EAAAA,EAAAJ,EAAAI,IACAH,EAAAG,IAAA,EACAD,EAAAC,IAAA,CAEAH,GAAAF,EAAA,GAAA,EACAI,EAAAJ,EAAA,GAAA,CAWA,KAAA,GAVAM,GAAAX,EAAAC,EAGAW,EAAAD,EAAA,GAAA,EAGAE,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,EAAAA,EAAAf,EAAAe,IAAA,CAEA,IAAA,GAAAC,IAAAD,EAAAJ,EAAAK,GAAAD,EAAAH,EAAAI,GAAA,EAAA,CACA,GACAC,GADAC,EAAAf,EAAAa,CAGAC,GADAD,IAAAD,GAAAC,GAAAD,GAAAV,EAAAa,EAAA,GAAAb,EAAAa,EAAA,GACAb,EAAAa,EAAA,GAEAb,EAAAa,EAAA,GAAA,CAGA,KADA,GAAAC,GAAAF,EAAAD,EACAC,EAAAnB,GAAAqB,EAAApB,GACAjC,EAAAsD,OAAAH,IAAAlD,EAAAqD,OAAAD,IACAF,IACAE,GAGA,IADAd,EAAAa,GAAAD,EACAA,EAAAnB,EAEAc,GAAA,MACA,IAAAO,EAAApB,EAEAY,GAAA,MACA,IAAAD,EAAA,CACA,GAAAW,GAAAlB,EAAAM,EAAAO,CACA,IAAAK,GAAA,GAAAA,EAAAjB,GAAAG,EAAAc,KAAA,EAAA,CAEA,GAAAC,GAAAxB,EAAAS,EAAAc,EACA,IAAAJ,GAAAK,EAEA,MAAAC,GAAAzD,EAAAC,EAAAkD,EAAAE,KAOA,IAAA,GAAAK,IAAAT,EAAAF,EAAAW,GAAAT,EAAAD,EAAAU,GAAA,EAAA,CACA,GACAF,GADAD,EAAAlB,EAAAqB,CAGAF,GADAE,IAAAT,GAAAS,GAAAT,GAAAR,EAAAc,EAAA,GAAAd,EAAAc,EAAA,GACAd,EAAAc,EAAA,GAEAd,EAAAc,EAAA,GAAA,CAGA,KADA,GAAAI,GAAAH,EAAAE,EACAF,EAAAxB,GAAA2B,EAAA1B,GACAjC,EAAAsD,OAAAtB,EAAAwB,EAAA,IACAvD,EAAAqD,OAAArB,EAAA0B,EAAA,IACAH,IACAG,GAGA,IADAlB,EAAAc,GAAAC,EACAA,EAAAxB,EAEAgB,GAAA,MACA,IAAAW,EAAA1B,EAEAc,GAAA,MACA,KAAAH,EAAA,CACA,GAAAQ,GAAAf,EAAAM,EAAAe,CACA,IAAAN,GAAA,GAAAA,EAAAd,GAAAC,EAAAa,KAAA,EAAA,CACA,GAAAD,GAAAZ,EAAAa,GACAC,EAAAhB,EAAAc,EAAAC,CAGA,IADAI,EAAAxB,EAAAwB,EACAL,GAAAK,EAEA,MAAAC,GAAAzD,EAAAC,EAAAkD,EAAAE,MAQA,QAAApC,EAAAjB,IAAAgB,EAAAf,IAaA,QAAAwD,GAAAzD,EAAAC,EAAAyC,EAAAkB,GACA,GAAAC,GAAA7D,EAAAO,UAAA,EAAAmC,GACAoB,EAAA7D,EAAAM,UAAA,EAAAqD,GACAG,EAAA/D,EAAAO,UAAAmC,GACAsB,EAAA/D,EAAAM,UAAAqD,GAGAlD,EAAAX,EAAA8D,EAAAC,GACAG,EAAAlE,EAAAgE,EAAAC,EAEA,OAAAtD,GAAAoB,OAAAmC,GAWA,QAAA5D,GAAAL,EAAAC,GAEA,IAAAD,IAAAC,GAAAD,EAAAsD,OAAA,IAAArD,EAAAqD,OAAA,GACA,MAAA,EAQA,KAJA,GAAAY,GAAA,EACAC,EAAAhC,KAAAiC,IAAApE,EAAAH,OAAAI,EAAAJ,QACAwE,EAAAF,EACAG,EAAA,EACAJ,EAAAG,GACArE,EAAAO,UAAA+D,EAAAD,IACApE,EAAAM,UAAA+D,EAAAD,IACAH,EAAAG,EACAC,EAAAJ,GAEAC,EAAAE,EAEAA,EAAAlC,KAAAoC,OAAAJ,EAAAD,GAAA,EAAAA,EAEA,OAAAG,GAUA,QAAA7D,GAAAR,EAAAC,GAEA,IAAAD,IAAAC,GACAD,EAAAsD,OAAAtD,EAAAH,OAAA,IAAAI,EAAAqD,OAAArD,EAAAJ,OAAA,GACA,MAAA,EAQA,KAJA,GAAAqE,GAAA,EACAC,EAAAhC,KAAAiC,IAAApE,EAAAH,OAAAI,EAAAJ,QACAwE,EAAAF,EACAK,EAAA,EACAN,EAAAG,GACArE,EAAAO,UAAAP,EAAAH,OAAAwE,EAAArE,EAAAH,OAAA2E,IACAvE,EAAAM,UAAAN,EAAAJ,OAAAwE,EAAApE,EAAAJ,OAAA2E,IACAN,EAAAG,EACAG,EAAAN,GAEAC,EAAAE,EAEAA,EAAAlC,KAAAoC,OAAAJ,EAAAD,GAAA,EAAAA,EAEA,OAAAG,GAcA,QAAA/C,GAAAtB,EAAAC,GAmBA,QAAAwE,GAAAvD,EAAAC,EAAA3B,GAMA,IAJA,GAGAkF,GAAAC,EAAAC,EAAAC,EAHAC,EAAA5D,EAAAX,UAAAf,EAAAA,EAAA2C,KAAAoC,MAAArD,EAAArB,OAAA,IACAkF,GAAA,EACAC,EAAA,IAEAD,EAAA5D,EAAAC,QAAA0D,EAAAC,EAAA,MAAA,GAAA,CACA,GAAAE,GAAA5E,EAAAa,EAAAX,UAAAf,GACA2B,EAAAZ,UAAAwE,IACAG,EAAA1E,EAAAU,EAAAX,UAAA,EAAAf,GACA2B,EAAAZ,UAAA,EAAAwE,GACAC,GAAAnF,OAAAqF,EAAAD,IACAD,EAAA7D,EAAAZ,UAAAwE,EAAAG,EAAAH,GACA5D,EAAAZ,UAAAwE,EAAAA,EAAAE,GACAP,EAAAxD,EAAAX,UAAA,EAAAf,EAAA0F,GACAP,EAAAzD,EAAAX,UAAAf,EAAAyF,GACAL,EAAAzD,EAAAZ,UAAA,EAAAwE,EAAAG,GACAL,EAAA1D,EAAAZ,UAAAwE,EAAAE,IAGA,MAAA,GAAAD,EAAAnF,QAAAqB,EAAArB,QACA6E,EAAAC,EACAC,EAAAC,EAAAG,GAEA,KA1CA,GAAA9D,GAAAlB,EAAAH,OAAAI,EAAAJ,OAAAG,EAAAC,EACAkB,EAAAnB,EAAAH,OAAAI,EAAAJ,OAAAI,EAAAD,CACA,IAAAkB,EAAArB,OAAA,GAAA,EAAAsB,EAAAtB,OAAAqB,EAAArB,OACA,MAAA,KA4CA,IAKAwB,GALA8D,EAAAV,EAAAvD,EAAAC,EACAgB,KAAAC,KAAAlB,EAAArB,OAAA,IAEAuF,EAAAX,EAAAvD,EAAAC,EACAgB,KAAAC,KAAAlB,EAAArB,OAAA,GAEA,KAAAsF,IAAAC,EACA,MAAA,KAOA/D,GANA+D,EAEAD,GAIAA,EAAA,GAAAtF,OAAAuF,EAAA,GAAAvF,OAAAsF,EAHAC,EAFAD,CASA,IAAA5D,GAAAC,EAAAC,EAAAC,CACA1B,GAAAH,OAAAI,EAAAJ,QACA0B,EAAAF,EAAA,GACAG,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,KAEAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GACAE,EAAAF,EAAA,GACAG,EAAAH,EAAA,GAEA,IAAAM,GAAAN,EAAA,EACA,QAAAE,EAAAC,EAAAC,EAAAC,EAAAC,GASA,QAAAb,GAAAJ,GACAA,EAAAG,MAAAV,EAAA,IAOA,KANA,GAKAC,GALAiF,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,GACAC,EAAA,GAEAJ,EAAA3E,EAAAb,QACA,OAAAa,EAAA2E,GAAA,IACA,IAAArE,GACAuE,IACAE,GAAA/E,EAAA2E,GAAA,GACAA,GACA,MACA,KAAApE,GACAqE,IACAE,GAAA9E,EAAA2E,GAAA,GACAA,GACA,MACA,KAAAlF,GAEAmF,EAAAC,EAAA,GACA,IAAAD,GAAA,IAAAC,IAEAnF,EAAAC,EAAAoF,EAAAD,GACA,IAAApF,IACAiF,EAAAC,EAAAC,EAAA,GACA7E,EAAA2E,EAAAC,EAAAC,EAAA,GAAA,IACApF,EACAO,EAAA2E,EAAAC,EAAAC,EAAA,GAAA,IACAE,EAAAlF,UAAA,EAAAH,IAEAM,EAAAgF,OAAA,EAAA,GAAAvF,EACAsF,EAAAlF,UAAA,EAAAH,KACAiF,KAEAI,EAAAA,EAAAlF,UAAAH,GACAoF,EAAAA,EAAAjF,UAAAH,IAGAA,EAAAI,EAAAiF,EAAAD,GACA,IAAApF,IACAM,EAAA2E,GAAA,GAAAI,EAAAlF,UAAAkF,EAAA5F,OACAO,GAAAM,EAAA2E,GAAA,GACAI,EAAAA,EAAAlF,UAAA,EAAAkF,EAAA5F,OACAO,GACAoF,EAAAA,EAAAjF,UAAA,EAAAiF,EAAA3F,OACAO,KAIA,IAAAkF,EACA5E,EAAAgF,OAAAL,EAAAE,EACAD,EAAAC,GAAAvE,EAAAyE,IACA,IAAAF,EACA7E,EAAAgF,OAAAL,EAAAC,EACAA,EAAAC,GAAAtE,EAAAuE,IAEA9E,EAAAgF,OAAAL,EAAAC,EAAAC,EACAD,EAAAC,GAAAtE,EAAAuE,IACAxE,EAAAyE,IAEAJ,EAAAA,EAAAC,EAAAC,GACAD,EAAA,EAAA,IAAAC,EAAA,EAAA,GAAA,GACA,IAAAF,GAAA3E,EAAA2E,EAAA,GAAA,IAAAlF,GAEAO,EAAA2E,EAAA,GAAA,IAAA3E,EAAA2E,GAAA,GACA3E,EAAAgF,OAAAL,EAAA,IAEAA,IAEAE,EAAA,EACAD,EAAA,EACAE,EAAA,GACAC,EAAA,GAIA,KAAA/E,EAAAA,EAAAb,OAAA,GAAA,IACAa,EAAAiF,KAMA,IAAAC,IAAA,CAGA,KAFAP,EAAA,EAEAA,EAAA3E,EAAAb,OAAA,GACAa,EAAA2E,EAAA,GAAA,IAAAlF,GACAO,EAAA2E,EAAA,GAAA,IAAAlF,IAEAO,EAAA2E,GAAA,GAAA9E,UAAAG,EAAA2E,GAAA,GAAAxF,OACAa,EAAA2E,EAAA,GAAA,GAAAxF,SAAAa,EAAA2E,EAAA,GAAA,IAEA3E,EAAA2E,GAAA,GAAA3E,EAAA2E,EAAA,GAAA,GACA3E,EAAA2E,GAAA,GAAA9E,UAAA,EAAAG,EAAA2E,GAAA,GAAAxF,OACAa,EAAA2E,EAAA,GAAA,GAAAxF,QACAa,EAAA2E,EAAA,GAAA,GAAA3E,EAAA2E,EAAA,GAAA,GAAA3E,EAAA2E,EAAA,GAAA,GACA3E,EAAAgF,OAAAL,EAAA,EAAA,GACAO,GAAA,GACAlF,EAAA2E,GAAA,GAAA9E,UAAA,EAAAG,EAAA2E,EAAA,GAAA,GAAAxF,SACAa,EAAA2E,EAAA,GAAA,KAEA3E,EAAA2E,EAAA,GAAA,IAAA3E,EAAA2E,EAAA,GAAA,GACA3E,EAAA2E,GAAA,GACA3E,EAAA2E,GAAA,GAAA9E,UAAAG,EAAA2E,EAAA,GAAA,GAAAxF,QACAa,EAAA2E,EAAA,GAAA,GACA3E,EAAAgF,OAAAL,EAAA,EAAA,GACAO,GAAA,IAGAP,GAGAO,IACA9E,EAAAJ,GAwBA,QAAAmF,GAAAnF,EAAAR,GACA,GAAA,IAAAA,EACA,OAAAC,EAAAO,EAEA,KAAA,GAAAoF,GAAA,EAAAtG,EAAA,EAAAA,EAAAkB,EAAAb,OAAAL,IAAA,CACA,GAAAyD,GAAAvC,EAAAlB,EACA,IAAAyD,EAAA,KAAAhC,GAAAgC,EAAA,KAAA9C,EAAA,CACA,GAAA4F,GAAAD,EAAA7C,EAAA,GAAApD,MACA,IAAAK,IAAA6F,EACA,OAAAvG,EAAA,EAAAkB,EACA,IAAAR,EAAA6F,EAAA,CAEArF,EAAAA,EAAAsF,OAEA,IAAAC,GAAA/F,EAAA4F,EACAI,GAAAjD,EAAA,GAAAA,EAAA,GAAA+C,MAAA,EAAAC,IACAE,GAAAlD,EAAA,GAAAA,EAAA,GAAA+C,MAAAC,GAEA,OADAvF,GAAAgF,OAAAlG,EAAA,EAAA0G,EAAAC,IACA3G,EAAA,EAAAkB,GAEAoF,EAAAC,GAIA,KAAA,IAAAtG,OAAA,gCAqBA,QAAAsB,GAAAL,EAAAR,GACA,GAAAkG,GAAAP,EAAAnF,EAAAR,GACAmG,EAAAD,EAAA,GACAE,EAAAF,EAAA,GACAnD,EAAAoD,EAAAC,GACAC,EAAAF,EAAAC,EAAA,EAEA,IAAA,MAAArD,EAGA,MAAAvC,EACA,IAAAuC,EAAA,KAAA9C,EAGA,MAAAO,EAEA,IAAA,MAAA6F,GAAAtD,EAAA,GAAAsD,EAAA,KAAAA,EAAA,GAAAtD,EAAA,GAIA,MADAoD,GAAAX,OAAAY,EAAA,EAAAC,EAAAtD,GACAuD,EAAAH,EAAAC,EAAA,EACA,IAAA,MAAAC,GAAA,IAAAA,EAAA,GAAAnF,QAAA6B,EAAA,IAAA,CAKAoD,EAAAX,OAAAY,EAAA,GAAAC,EAAA,GAAAtD,EAAA,KAAA,EAAAA,EAAA,IACA,IAAAwD,GAAAF,EAAA,GAAAP,MAAA/C,EAAA,GAAApD,OAIA,OAHA4G,GAAA5G,OAAA,GACAwG,EAAAX,OAAAY,EAAA,EAAA,GAAAC,EAAA,GAAAE,IAEAD,EAAAH,EAAAC,EAAA,GAGA,MAAA5F,GAeA,QAAA8F,GAAA9F,EAAAgG,EAAA7G,GAEA,IAAA,GAAAL,GAAAkH,EAAA7G,EAAA,EAAAL,GAAA,GAAAA,GAAAkH,EAAA,EAAAlH,IACA,GAAAA,EAAA,EAAAkB,EAAAb,OAAA,CACA,GAAA8G,GAAAjG,EAAAlB,GACAoH,EAAAlG,EAAAlB,EAAA,EACAmH,GAAA,KAAAC,EAAA,IACAlG,EAAAgF,OAAAlG,EAAA,GAAAmH,EAAA,GAAAA,EAAA,GAAAC,EAAA,KAIA,MAAAlG,GAzpBA,GAAAO,IAAA,EACAD,EAAA,EACAb,EAAA,EA2hBA0G,EAAA9G,CACA8G,GAAAC,OAAA9F,EACA6F,EAAAE,OAAA9F,EACA4F,EAAAG,MAAA7G,EAEA7B,EAAAD,QAAAwI,0BChkBA,ykBAIA,QAASI,GAAQC,GACfA,EAAEC,gBAAgB,UAAUC,KAAK,WAAY,GACrCC,GADqC,SAAAC,GAEzC,QAAAD,GAAaE,EAAIC,EAAQC,GAAUC,EAAA7I,KAAAwI,EAAA,IAAAM,GAAAC,EAAA/I,MAAAwI,EAAAQ,WAAAC,OAAAC,eAAAV,IAAAzH,KAAAf,KAC3B0I,EAAIC,EAAQC,GADe,OAEjCE,GAAKK,cACLL,EAAKM,gBACLN,EAAKO,uBAJ4BP,EAFM,MAAAQ,GAAAd,EAAAC,GAAAc,EAAAf,IAAAgB,IAAA,WAAAC,MAAA,WASvC,MAAOzJ,MAAK4I,SAASc,IAAI,SAAUC,GACjC,MAAOA,GAAEC,MACRC,KAAK,OAX+BL,IAAA,SAAAC,MAAA,SAajCK,EAAKC,GACXC,EAAAxB,EAAAyB,UAAAjB,WAAAC,OAAAC,eAAAV,EAAAyB,WAAA,SAAAjK,MAAAe,KAAAf,KAAa8J,EAAKC,EAAQG,MAAM,QAdOV,IAAA,YAAAC,MAAA,WAiBvCzJ,KAAKmK,oBACLnK,KAAKoK,eACLpK,KAAKqK,yBAnBkCb,IAAA,mBAAAC,MAAA,SAqBvBa,GAChB,GAAI3J,GAAIX,KAAKqJ,oBAAoBkB,UAAU,SAAUC,GACnD,MAAOA,GAAQC,SAAWH,GAE5B,IAAI3J,GAAK,EAAG,CACV,GAAI6J,GAAUxK,KAAKqJ,oBAAoB1I,EACvCX,MAAK0K,UAAUF,EAAQG,WACvBH,EAAQC,OAAOG,IAAI,SAAUJ,EAAQK,aACrC7K,KAAKqJ,oBAAoBxC,OAAOlG,EAAG,OA7BE6I,IAAA,sBAAAC,MAAA,WAiCvC,IAAK,GAAI9I,GAAIX,KAAKqJ,oBAAoBrI,OAAS,EAAGL,GAAK,EAAGA,IACxDX,KAAK8K,iBAAiB9K,KAAKqJ,oBAAoB1I,GAAG8J,WAlCbjB,IAAA,iBAAAC,MAAA,SAqCzBa,EAAoBS,GAOlC,QAASC,GAAezL,GACtB,GAAI0L,EAAO,CACTA,GAAQ,CACR,KACE1L,IACA,MAAOW,GAEP,KADA+K,IAAQ,EACF,GAAIrK,OAAMV,GAElB+K,GAAQ,GAKZ,QAASC,GAAoBC,EAAIrH,GAC/BkH,EAAc,WACZ,GAAInD,GAAQyC,EAAmBc,aAAatH,EAAMuH,KAElD,IAAIvH,EAAMwH,QAAQtK,OAAS,EAAG,CAE5B,IAAK,GADDuK,GAAY,EACP5K,EAAI,EAAGA,EAAImD,EAAMwH,QAAQtK,OAAQL,IACxC4K,GAAazH,EAAMwH,QAAQ3K,GAAGK,MAGhCuK,IAAazH,EAAMwH,QAAQtK,OAAS,EACpCjB,EAAKyL,OAAO3D,EAAO0D,GAGrBxL,EAAK0L,OAAO5D,EAAO/D,EAAM4H,KAAK7B,KAAK,SAKvC,QAASc,GAAWgB,GAClBX,EAAc,WACZ,GAAIK,GAAOf,EAAmBsB,aAAaD,EAAME,MACjD,IAAmB,WAAfF,EAAMG,KAAmB,CAC3B,GAAIC,GAAKV,CACTf,GAAmB0B,aAAaL,EAAMM,OAAOpC,KAAK,IAAKwB,EAAMU,OACxD,IAAmB,WAAfJ,EAAMG,KAAmB,CAClC,GAAII,GAAK5B,EAAmBsB,aAAaD,EAAME,MAAQF,EAAM3K,OAC7DsJ,GAAmB0B,aAAa,GAAIX,EAAMa,MA/ChD,GAAInM,GAAOC,IACX+K,GAAUA,KAIV,IAAIE,IAAQ,CAaZX,GAAmB6B,SAASnM,KAAKoM,YAmBjC9B,EAAmB+B,GAAG,SAAUnB,GAchClL,KAAKsM,QAAQ3B,GACb3K,KAAKqJ,oBAAoBrH,MACvByI,OAAQH,EACRK,UAAWA,EACXO,mBAAoBA,OA7FiB1B,IAAA,YAAAC,MAAA,SAgG9B8C,GACT,GAAI5L,GAAIX,KAAKoJ,aAAamB,UAAU,SAAUC,GAC5C,MAAOA,GAAQC,SAAW8B,GAE5B,IAAI5L,GAAK,EAAG,CACV,GAAI6J,GAAUxK,KAAKoJ,aAAazI,EAChCX,MAAK0K,UAAUF,EAAQG,WACvBH,EAAQC,OAAOG,IAAI,SAAUJ,EAAQK,aACrC7K,KAAKoJ,aAAavC,OAAOlG,EAAG,OAxGS6I,IAAA,eAAAC,MAAA,WA4GvC,IAAK,GAAI9I,GAAIX,KAAKoJ,aAAapI,OAAS,EAAGL,GAAK,EAAGA,IACjDX,KAAKwM,UAAUxM,KAAKoJ,aAAazI,GAAG8J,WA7GCjB,IAAA,UAAAC,MAAA,SAgHhC8C,EAAaxB,GAOpB,QAASC,GAAezL,GACtB,GAAI0L,EAAO,CACTA,GAAQ,CACR,KACE1L,IACA,MAAOW,GAEP,KADA+K,IAAQ,EACF,GAAIrK,OAAMV,GAElB+K,GAAQ,GAKZ,QAASJ,GAAa/G,GACpBkH,EAAc,WACZ,GAAInD,GACA7G,EAEAyL,EAAcF,EAAYG,aAAaC,aACtB,YAAjB7I,EAAM8I,QACR/E,EAAQ4E,EAAYI,gBAAgB/I,EAAM+D,MAAO,GACjD9H,EAAK0L,OAAO5D,EAAO/D,EAAMgJ,MAAMjD,KAAK,QACV,WAAjB/F,EAAM8I,SACf/E,EAAQ4E,EAAYI,gBAAgB/I,EAAM+D,MAAO,GACjD7G,EAAS8C,EAAMgJ,MAAMjD,KAAK,MAAM7I,OAChCjB,EAAKyL,OAAO3D,EAAO7G,MAmBzB,QAAS2J,GAAWgB,GAClB,GAAIc,GAAcF,EAAYG,aAAaC,aAC3C3B,GAAc,WACZ,GAAmB,WAAfW,EAAMG,KAAmB,CAC3B,GAAIjE,GAAQ4E,EAAYM,gBAAgBpB,EAAME,MAAO,EACrDY,GAAYhB,OAAO5D,EAAO8D,EAAMM,OAAOpC,KAAK,SACvC,IAAmB,WAAf8B,EAAMG,KAAmB,CAClC,GAAIkB,GAAQP,EAAYM,gBAAgBpB,EAAME,MAAO,GACjDoB,EAAMR,EAAYM,gBAAgBpB,EAAME,MAAQF,EAAM3K,OAAQ,GAC9DkM,EAAQ,GAAIC,GAAMH,EAAMI,IAAKJ,EAAMK,OAAQJ,EAAIG,IAAKH,EAAII,OAC5DZ,GAAYa,OAAOJ,MA7DzB,GAAInN,GAAOC,IACX+K,GAAUA,KAIV,IAAIE,IAAQ,CAaZsB,GAAYJ,SAASnM,KAAKoM,YAkB1BG,EAAYF,GAAG,SAAUxB,GAEzB0B,EAAYgB,UAAUC,gBAItB,IAAIC,EAEFA,GADiB,mBAARC,MAA2C,MAApB3C,EAAQ0C,SAC7BC,IAEA3C,EAAQ0C,QAErB,IAAIE,GAAa5C,EAAQ4C,YAAcF,EAAS/M,QAC5CyM,EAAQQ,EAAW,aAAaR,KAgBpCnN,MAAKsM,QAAQ3B,GACb3K,KAAKoJ,aAAapH,MAChByI,OAAQ8B,EACR5B,UAAWA,EACXE,YAAaA,OAtLwBrB,IAAA,OAAAC,MAAA,WA0LvC,GAAIvJ,GAAI0N,UAAU,EACd1N,aAAa2N,SACf7N,KAAK8N,aAAaC,MAAM/N,KAAM4N,WAChB,MAAL1N,GAA0B,MAAbA,EAAE8N,SAAmC,MAAhB9N,EAAEwM,YAAoC,MAAdxM,EAAEiM,SACrEnM,KAAKiO,QAAQF,MAAM/N,KAAM4N,WACX,MAAL1N,GAA+B,MAAlBA,EAAE0L,cAA0C,MAAlB1L,EAAE8L,aAClDhM,KAAKkO,eAAeH,MAAM/N,KAAM4N,WAEhCO,QAAQC,MAAM,uCAlMuB5E,IAAA,iBAAAC,MAAA,SAqMzB4E,GACd,GAAI1N,GAAIX,KAAKmJ,WAAWoB,UAAU,SAAUC,GAC1C,MAAOA,GAAQC,SAAW4D,GAE5B,IAAI1N,GAAK,EAAG,CACV,GAAI6J,GAAUxK,KAAKmJ,WAAWxI,EAC9BX,MAAK0K,UAAUF,EAAQG,UACvB,IAAIzK,GAAIsK,EAAQC,MAChBvK,GAAEoO,oBAAoB,QAAS9D,EAAQ+D,eACvCvO,KAAKmJ,WAAWtC,OAAOlG,EAAG,OA9MW6I,IAAA,oBAAAC,MAAA,WAkNvC,IAAK,GAAI9I,GAAIX,KAAKmJ,WAAWnI,OAAS,EAAGL,GAAK,EAAGA,IAC/CX,KAAKwO,eAAexO,KAAKmJ,WAAWxI,GAAG8J,WAnNFjB,IAAA,eAAAC,MAAA,SAsN3BgF,EAAWC,GAevB,QAAS1D,GAAezL,GACtB,GAAI0L,EAAO,CACTA,GAAQ,CACR,KACE1L,IACA,MAAOW,GAEP,KADA+K,IAAQ,EACF,GAAIrK,OAAMV,GAElB+K,GAAQ,GA2FZ,QAASN,GAAWgB,GAClBX,EAAc,WACZ,GAAI2D,GAAMC,CACV,IAAmB,WAAfjD,EAAMG,KAAmB,CAC3B6C,EAAOhD,EAAME,MACb+C,EAAM,SAAUC,GACd,MAAIA,IAAUF,EACLE,EAEPA,GAAU,EAId,IAAIxO,GAAIyO,EAAYF,EACpBG,GAAW1O,OACa,WAAfsL,EAAMG,OACf6C,EAAOhD,EAAME,MACb+C,EAAM,SAAUC,GACd,MAAIA,GAASF,EACJE,EAEPA,GAAU,GAIdxO,EAAIyO,EAAYF,GAChBG,EAAW1O,MA5IjBqO,EAAUA,GAAW7O,OACO,MAAxB6O,EAAQM,eACVN,EAAU7O,OAIZ,KAAK,GAAIM,GAAI,EAAGA,EAAIH,KAAKmJ,WAAWnI,OAAQb,IAC1C,GAAIH,KAAKmJ,WAAWhJ,GAAGsK,SAAWgE,EAChC,MAKJ,IAAIxD,IAAQ,EAcRlL,EAAOC,IACXyO,GAAUhF,MAAQzJ,KAAKoM,UAEvB,IAAI0C,GAAaC,EAAYE,EAAcC,CACX,OAA5BT,EAAUU,gBAAyD,MAA/BV,EAAUW,mBAChDN,EAAc,SAAUF,GACtB,GAAIS,GAAOZ,EAAUU,eACjBG,EAAQb,EAAUc,YAKtB,OAJW,OAAPX,IACFS,EAAOT,EAAIS,GACXC,EAAQV,EAAIU,KAGZD,KAAMA,EACNC,MAAOA,IAGXP,EAAa,SAAU7B,GACrB+B,EAAalP,EAAKqM,YAClBqC,EAAUW,kBAAkBlC,EAAMmC,KAAMnC,EAAMoC,QAEhDL,EAAe,SAAUlF,GACvB0E,EAAUhF,MAAQM,GAEpBmF,EAAa,WACX,MAAOT,GAAUhF,SAGnBqF,EAAc,SAAUF,GACtB,GAAI1B,MACA5M,EAAIoO,EAAQM,eACZQ,EAAUf,EAAUgB,YAAYzO,MACpCkM,GAAMmC,KAAO/L,KAAKiC,IAAIjF,EAAEoP,aAAcF,GACtCtC,EAAMoC,MAAQhM,KAAKiC,IAAIjF,EAAEqP,YAAaH,GAC3B,MAAPZ,IACF1B,EAAMmC,KAAOT,EAAI1B,EAAMmC,MACvBnC,EAAMoC,MAAQV,EAAI1B,EAAMoC,OAE1B,IAAIM,GAAgBtP,EAAEuP,SAMtB,OALID,KAAkBnB,GAAamB,IAAkBnB,EAAUqB,WAAW,GACxE5C,EAAM6C,QAAS,EAEf7C,EAAM6C,QAAS,EAEV7C,GAGT6B,EAAa,SAAU7B,GACrB+B,EAAalP,EAAKqM,WAClB,IAAI4D,GAAWvB,EAAUqB,WAAW,EACpC,IAAI5C,EAAM6C,QAAsB,MAAZC,EAAkB,CAChC9C,EAAMmC,KAAO,IACfnC,EAAMmC,KAAO,GAEfnC,EAAMoC,MAAQhM,KAAK2M,IAAI/C,EAAMmC,KAAMnC,EAAMoC,OACrCpC,EAAMoC,MAAQU,EAAShP,SACzBkM,EAAMoC,MAAQU,EAAShP,QAEzBkM,EAAMmC,KAAO/L,KAAKiC,IAAI2H,EAAMmC,KAAMnC,EAAMoC,MACxC,IAAIjP,GAAI6P,SAASpB,aACjBzO,GAAE8P,SAASH,EAAU9C,EAAMmC,MAC3BhP,EAAE+P,OAAOJ,EAAU9C,EAAMoC,MACzB,IAAIhP,GAAIoO,EAAQM,cAChB1O,GAAE+P,kBACF/P,EAAEgQ,SAASjQ,KAGf4O,EAAe,SAAUlF,GACvB0E,EAAU8B,UAAYxG,GAaxBmF,EAAa,WACX,MAAOT,GAAU8B,YAGrBtB,EAAajP,KAAKoM,YAgClBpM,KAAKsM,QAAQ3B,EAEb,IAAI6F,GAAoB,WACtBxF,EAAc,WAMZ,IAAK,GALD3K,GAAIyO,EAAY,SAAUjL,GAAK,MAAOA,KACtC4M,EAAa1Q,EAAKqM,WAClBrC,EAAUmF,IACVrN,EAAQmG,EAAKyI,EAAY1G,EAAS1J,EAAEgP,MACpCvF,EAAM,EACDnJ,EAAI,EAAGA,EAAIkB,EAAMb,OAAQL,IAAK,CACrC,GAAIyD,GAAIvC,EAAMlB,EACD,KAATyD,EAAE,GACJ0F,GAAO1F,EAAE,GAAGpD,OACHoD,EAAE,MAAO,EAClBrE,EAAKyL,OAAO1B,EAAK1F,EAAE,GAAGpD,SAEtBjB,EAAK0L,OAAO3B,EAAK1F,EAAE,IACnB0F,GAAO1F,EAAE,GAAGpD,WAKpByN,GAAUiC,iBAAiB,QAASF,GACpCxQ,KAAKmJ,WAAWnH,MACdyI,OAAQgE,EACR9D,UAAWA,EACX4D,cAAeiC,OAjYsBhH,IAAA,WAAAC,MAAA,WAqYvCzJ,KAAK2Q,YACL3Q,KAAKmJ,WAAa,KAClBnJ,KAAKoJ,aAAe,KACpBY,EAAAxB,EAAAyB,UAAAjB,WAAAC,OAAAC,eAAAV,EAAAyB,WAAA,WAAAjK,MAAAe,KAAAf,UAxYuCwI,GACvBH,EAAE1E,MAAMiN,eAAR,MA0YpBvI,GAAED,OAAO,OAAQ,GAAIC,GAAEwI,MAAMC,sBAC3BC,KAAM,OACNC,MAAOxI,EACPyI,OAAQ,OACRC,SAAAC,mBAAAC,KAAU,QAAWC,GAAkB3I,EAAI4I,GAAjC,GAAA1I,EAAA,OAAAuI,oBAAAI,KAAA,SAAAC,GAAA,OAAA,OAAAA,EAAAC,KAAAD,EAAAE,MAAA,IAAA,GAAA,MACJ9I,MADI4I,EAAAG,cAEDtJ,EAAEuJ,OAAOC,KAAKnI,IAAI3I,KAAKf,KAAMsR,EAAO,SAAUQ,GACnD,GAAIA,EAAGC,eAAe,aACpB,KAAM,IAAInR,OAAM,+BAEhBkR,GAAG/H,QAAQiI,QAAQ,SAAUrI,EAAGhJ,GAC9BiI,EAAS5G,MACPiQ,IAAKH,EAAGG,GAAG,GAAIH,EAAGG,GAAG,GAAKtR,GAC1BiJ,IAAKkI,EAAG/H,QAAQpJ,SAThB,KAAA,EAAA,KAAA,GAAA,MAAA6Q,GAAAU,OAAA,SAcD,GAAI1J,GAAME,EAAI4I,EAAMW,GAAIrJ,GAdvB,KAAA,GAAA,IAAA,MAAA,MAAA4I,GAAAW,SAAWd,EAAXrR,QAgBVoS,WAAY,SAAuB1J,EAAI4I,GACrC,MAAO,IAAI9I,GAAME,EAAI4I,EAAMW,8fAna/BjK,EAAOtH,EAAQ,YAyanBjB,GAAOD,QAAU4I,EACA,mBAANC,IACTD,EAAOC","file":"y-text.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\n * This library modifies the diff-patch-match library by Neil Fraser\n * by removing the patch and match functionality and certain advanced\n * options in the diff function. The original license is as follows:\n *\n * ===\n *\n * Diff Match and Patch\n *\n * Copyright 2006 Google Inc.\n * http://code.google.com/p/google-diff-match-patch/\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {Int} cursor_pos Expected edit position in text1 (optional)\n * @return {Array} Array of diff tuples.\n */\nfunction diff_main(text1, text2, cursor_pos) {\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [[DIFF_EQUAL, text1]];\n    }\n    return [];\n  }\n\n  // Check cursor_pos within bounds\n  if (cursor_pos < 0 || text1.length < cursor_pos) {\n    cursor_pos = null;\n  }\n\n  // Trim off common prefix (speedup).\n  var commonlength = diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = diff_compute_(text1, text2);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift([DIFF_EQUAL, commonprefix]);\n  }\n  if (commonsuffix) {\n    diffs.push([DIFF_EQUAL, commonsuffix]);\n  }\n  diff_cleanupMerge(diffs);\n  if (cursor_pos != null) {\n    diffs = fix_cursor(diffs, cursor_pos);\n  }\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_compute_(text1, text2) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [[DIFF_INSERT, text2]];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [[DIFF_DELETE, text1]];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [[DIFF_INSERT, longtext.substring(0, i)],\n             [DIFF_EQUAL, shorttext],\n             [DIFF_INSERT, longtext.substring(i + shorttext.length)]];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = diff_main(text1_a, text2_a);\n    var diffs_b = diff_main(text1_b, text2_b);\n    // Merge the results.\n    return diffs_a.concat([[DIFF_EQUAL, mid_common]], diffs_b);\n  }\n\n  return diff_bisect_(text1, text2);\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @return {Array} Array of diff tuples.\n * @private\n */\nfunction diff_bisect_(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return diff_bisectSplit_(text1, text2, x1, y1);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [[DIFF_DELETE, text1], [DIFF_INSERT, text2]];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @return {Array} Array of diff tuples.\n */\nfunction diff_bisectSplit_(text1, text2, x, y) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = diff_main(text1a, text2a);\n  var diffsb = diff_main(text1b, text2b);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\nfunction diff_commonPrefix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\nfunction diff_commonSuffix(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: http://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n */\nfunction diff_halfMatch_(text1, text2) {\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = diff_commonPrefix(longtext.substring(i),\n                                           shorttext.substring(j));\n      var suffixLength = diff_commonSuffix(longtext.substring(0, i),\n                                           shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {Array} diffs Array of diff tuples.\n */\nfunction diff_cleanupMerge(diffs) {\n  diffs.push([DIFF_EQUAL, '']);  // Add a dummy entry at the end.\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, [DIFF_EQUAL,\n                                    text_insert.substring(0, commonlength)]);\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          if (count_delete === 0) {\n            diffs.splice(pointer - count_insert,\n                count_delete + count_insert, [DIFF_INSERT, text_insert]);\n          } else if (count_insert === 0) {\n            diffs.splice(pointer - count_delete,\n                count_delete + count_insert, [DIFF_DELETE, text_delete]);\n          } else {\n            diffs.splice(pointer - count_delete - count_insert,\n                count_delete + count_insert, [DIFF_DELETE, text_delete],\n                [DIFF_INSERT, text_insert]);\n          }\n          pointer = pointer - count_delete - count_insert +\n                    (count_delete ? 1 : 0) + (count_insert ? 1 : 0) + 1;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    diff_cleanupMerge(diffs);\n  }\n};\n\n\nvar diff = diff_main;\ndiff.INSERT = DIFF_INSERT;\ndiff.DELETE = DIFF_DELETE;\ndiff.EQUAL = DIFF_EQUAL;\n\nmodule.exports = diff;\n\n/*\n * Modify a diff such that the cursor position points to the start of a change:\n * E.g.\n *   cursor_normalize_diff([[DIFF_EQUAL, 'abc']], 1)\n *     => [1, [[DIFF_EQUAL, 'a'], [DIFF_EQUAL, 'bc']]]\n *   cursor_normalize_diff([[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xyz']], 2)\n *     => [2, [[DIFF_INSERT, 'new'], [DIFF_DELETE, 'xy'], [DIFF_DELETE, 'z']]]\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} A tuple [cursor location in the modified diff, modified diff]\n */\nfunction cursor_normalize_diff (diffs, cursor_pos) {\n  if (cursor_pos === 0) {\n    return [DIFF_EQUAL, diffs];\n  }\n  for (var current_pos = 0, i = 0; i < diffs.length; i++) {\n    var d = diffs[i];\n    if (d[0] === DIFF_DELETE || d[0] === DIFF_EQUAL) {\n      var next_pos = current_pos + d[1].length;\n      if (cursor_pos === next_pos) {\n        return [i + 1, diffs];\n      } else if (cursor_pos < next_pos) {\n        // copy to prevent side effects\n        diffs = diffs.slice();\n        // split d into two diff changes\n        var split_pos = cursor_pos - current_pos;\n        var d_left = [d[0], d[1].slice(0, split_pos)];\n        var d_right = [d[0], d[1].slice(split_pos)];\n        diffs.splice(i, 1, d_left, d_right);\n        return [i + 1, diffs];\n      } else {\n        current_pos = next_pos;\n      }\n    }\n  }\n  throw new Error('cursor_pos is out of bounds!')\n}\n\n/*\n * Modify a diff such that the edit position is \"shifted\" to the proposed edit location (cursor_position).\n *\n * Case 1)\n *   Check if a naive shift is possible:\n *     [0, X], [ 1, Y] -> [ 1, Y], [0, X]    (if X + Y === Y + X)\n *     [0, X], [-1, Y] -> [-1, Y], [0, X]    (if X + Y === Y + X) - holds same result\n * Case 2)\n *   Check if the following shifts are possible:\n *     [0, 'pre'], [ 1, 'prefix'] -> [ 1, 'pre'], [0, 'pre'], [ 1, 'fix']\n *     [0, 'pre'], [-1, 'prefix'] -> [-1, 'pre'], [0, 'pre'], [-1, 'fix']\n *         ^            ^\n *         d          d_next\n *\n * @param {Array} diffs Array of diff tuples\n * @param {Int} cursor_pos Suggested edit position. Must not be out of bounds!\n * @return {Array} Array of diff tuples\n */\nfunction fix_cursor (diffs, cursor_pos) {\n  var norm = cursor_normalize_diff(diffs, cursor_pos);\n  var ndiffs = norm[1];\n  var cursor_pointer = norm[0];\n  var d = ndiffs[cursor_pointer];\n  var d_next = ndiffs[cursor_pointer + 1];\n\n  if (d == null) {\n    // Text was deleted from end of original string,\n    // cursor is now out of bounds in new string\n    return diffs;\n  } else if (d[0] !== DIFF_EQUAL) {\n    // A modification happened at the cursor location.\n    // This is the expected outcome, so we can return the original diff.\n    return diffs;\n  } else {\n    if (d_next != null && d[1] + d_next[1] === d_next[1] + d[1]) {\n      // Case 1)\n      // It is possible to perform a naive shift\n      ndiffs.splice(cursor_pointer, 2, d_next, d)\n      return merge_tuples(ndiffs, cursor_pointer, 2)\n    } else if (d_next != null && d_next[1].indexOf(d[1]) === 0) {\n      // Case 2)\n      // d[1] is a prefix of d_next[1]\n      // We can assume that d_next[0] !== 0, since d[0] === 0\n      // Shift edit locations..\n      ndiffs.splice(cursor_pointer, 2, [d_next[0], d[1]], [0, d[1]]);\n      var suffix = d_next[1].slice(d[1].length);\n      if (suffix.length > 0) {\n        ndiffs.splice(cursor_pointer + 2, 0, [d_next[0], suffix]);\n      }\n      return merge_tuples(ndiffs, cursor_pointer, 3)\n    } else {\n      // Not possible to perform any modification\n      return diffs;\n    }\n  }\n\n}\n\n/*\n * Try to merge tuples with their neigbors in a given range.\n * E.g. [0, 'a'], [0, 'b'] -> [0, 'ab']\n *\n * @param {Array} diffs Array of diff tuples.\n * @param {Int} start Position of the first element to merge (diffs[start] is also merged with diffs[start - 1]).\n * @param {Int} length Number of consecutive elements to check.\n * @return {Array} Array of merged diff tuples.\n */\nfunction merge_tuples (diffs, start, length) {\n  // Check from (start-1) to (start+length).\n  for (var i = start + length - 1; i >= 0 && i >= start - 1; i--) {\n    if (i + 1 < diffs.length) {\n      var left_d = diffs[i];\n      var right_d = diffs[i+1];\n      if (left_d[0] === right_d[1]) {\n        diffs.splice(i, 2, [left_d[0], left_d[1] + right_d[1]]);\n      }\n    }\n  }\n  return diffs;\n}\n","/* global Y, Element */\n'use strict'\n\nvar diff = require('fast-diff')\n\nfunction extend (Y) {\n  Y.requestModules(['Array']).then(function () {\n    class YText extends Y.Array.typeDefinition['class'] {\n      constructor (os, _model, _content) {\n        super(os, _model, _content)\n        this.textfields = []\n        this.aceInstances = []\n        this.codeMirrorInstances = []\n      }\n      toString () {\n        return this._content.map(function (c) {\n          return c.val\n        }).join('')\n      }\n      insert (pos, content) {\n        super.insert(pos, content.split(''))\n      }\n      unbindAll () {\n        this.unbindTextareaAll()\n        this.unbindAceAll()\n        this.unbindCodeMirrorAll()\n      }\n      unbindCodeMirror (codeMirrorInstance) {\n        var i = this.codeMirrorInstances.findIndex(function (binding) {\n          return binding.editor === codeMirrorInstance\n        })\n        if (i >= 0) {\n          var binding = this.codeMirrorInstances[i]\n          this.unobserve(binding.yCallback)\n          binding.editor.off('change', binding.aceCallback)\n          this.codeMirrorInstances.splice(i, 1)\n        }\n      }\n      unbindCodeMirrorAll () {\n        for (let i = this.codeMirrorInstances.length - 1; i >= 0; i--) {\n          this.unbindCodeMirror(this.codeMirrorInstances[i].editor)\n        }\n      }\n      bindCodeMirror (codeMirrorInstance, options) {\n        var self = this\n        options = options || {}\n\n        // this function makes sure that either the\n        // ace event is executed, or the yjs observer is executed\n        var token = true\n        function mutualExcluse (f) {\n          if (token) {\n            token = false\n            try {\n              f()\n            } catch (e) {\n              token = true\n              throw new Error(e)\n            }\n            token = true\n          }\n        }\n        codeMirrorInstance.setValue(this.toString())\n\n        function codeMirrorCallback (cm, delta) {\n          mutualExcluse(function () {\n            var start = codeMirrorInstance.indexFromPos(delta.from)\n            // apply the delete operation first\n            if (delta.removed.length > 0) {\n              var delLength = 0\n              for (var i = 0; i < delta.removed.length; i++) {\n                delLength += delta.removed[i].length\n              }\n              // \"enter\" is also a character in our case\n              delLength += delta.removed.length - 1\n              self.delete(start, delLength)\n            }\n            // apply insert operation\n            self.insert(start, delta.text.join('\\n'))\n          })\n        }\n        codeMirrorInstance.on('change', codeMirrorCallback)\n\n        function yCallback (event) {\n          mutualExcluse(function () {\n            let from = codeMirrorInstance.posFromIndex(event.index)\n            if (event.type === 'insert') {\n              let to = from\n              codeMirrorInstance.replaceRange(event.values.join(''), from, to)\n            } else if (event.type === 'delete') {\n              let to = codeMirrorInstance.posFromIndex(event.index + event.length)\n              codeMirrorInstance.replaceRange('', from, to)\n            }\n          })\n        }\n        this.observe(yCallback)\n        this.codeMirrorInstances.push({\n          editor: codeMirrorInstance,\n          yCallback: yCallback,\n          codeMirrorCallback: codeMirrorCallback\n        })\n      }\n      unbindAce (aceInstance) {\n        var i = this.aceInstances.findIndex(function (binding) {\n          return binding.editor === aceInstance\n        })\n        if (i >= 0) {\n          var binding = this.aceInstances[i]\n          this.unobserve(binding.yCallback)\n          binding.editor.off('change', binding.aceCallback)\n          this.aceInstances.splice(i, 1)\n        }\n      }\n      unbindAceAll () {\n        for (let i = this.aceInstances.length - 1; i >= 0; i--) {\n          this.unbindAce(this.aceInstances[i].editor)\n        }\n      }\n      bindAce (aceInstance, options) {\n        var self = this\n        options = options || {}\n\n        // this function makes sure that either the\n        // ace event is executed, or the yjs observer is executed\n        var token = true\n        function mutualExcluse (f) {\n          if (token) {\n            token = false\n            try {\n              f()\n            } catch (e) {\n              token = true\n              throw new Error(e)\n            }\n            token = true\n          }\n        }\n        aceInstance.setValue(this.toString())\n\n        function aceCallback (delta) {\n          mutualExcluse(function () {\n            var start\n            var length\n\n            var aceDocument = aceInstance.getSession().getDocument()\n            if (delta.action === 'insert') {\n              start = aceDocument.positionToIndex(delta.start, 0)\n              self.insert(start, delta.lines.join('\\n'))\n            } else if (delta.action === 'remove') {\n              start = aceDocument.positionToIndex(delta.start, 0)\n              length = delta.lines.join('\\n').length\n              self.delete(start, length)\n            }\n          })\n        }\n        aceInstance.on('change', aceCallback)\n\n        aceInstance.selection.clearSelection()\n\n        // We don't that ace is a global variable\n        // see #2\n        var aceClass\n        if (typeof ace !== 'undefined' && options.aceClass == null) {\n          aceClass = ace // eslint-disable-line\n        } else {\n          aceClass = options.aceClass\n        }\n        var aceRequire = options.aceRequire || aceClass.require\n        var Range = aceRequire('ace/range').Range\n\n        function yCallback (event) {\n          var aceDocument = aceInstance.getSession().getDocument()\n          mutualExcluse(function () {\n            if (event.type === 'insert') {\n              let start = aceDocument.indexToPosition(event.index, 0)\n              aceDocument.insert(start, event.values.join(''))\n            } else if (event.type === 'delete') {\n              let start = aceDocument.indexToPosition(event.index, 0)\n              let end = aceDocument.indexToPosition(event.index + event.length, 0)\n              var range = new Range(start.row, start.column, end.row, end.column)\n              aceDocument.remove(range)\n            }\n          })\n        }\n        this.observe(yCallback)\n        this.aceInstances.push({\n          editor: aceInstance,\n          yCallback: yCallback,\n          aceCallback: aceCallback\n        })\n      }\n      bind () {\n        var e = arguments[0]\n        if (e instanceof Element) {\n          this.bindTextarea.apply(this, arguments)\n        } else if (e != null && e.session != null && e.getSession != null && e.setValue != null) {\n          this.bindAce.apply(this, arguments)\n        } else if (e != null && e.posFromIndex != null && e.replaceRange != null) {\n          this.bindCodeMirror.apply(this, arguments)\n        } else {\n          console.error('Cannot bind, unsupported editor!')\n        }\n      }\n      unbindTextarea (textarea) {\n        var i = this.textfields.findIndex(function (binding) {\n          return binding.editor === textarea\n        })\n        if (i >= 0) {\n          var binding = this.textfields[i]\n          this.unobserve(binding.yCallback)\n          var e = binding.editor\n          e.removeEventListener('input', binding.eventListener)\n          this.textfields.splice(i, 1)\n        }\n      }\n      unbindTextareaAll () {\n        for (let i = this.textfields.length - 1; i >= 0; i--) {\n          this.unbindTextarea(this.textfields[i].editor)\n        }\n      }\n      bindTextarea (textfield, domRoot) {\n        domRoot = domRoot || window; // eslint-disable-line\n        if (domRoot.getSelection == null) {\n          domRoot = window; // eslint-disable-line\n        }\n\n        // don't duplicate!\n        for (var t = 0; t < this.textfields.length; t++) {\n          if (this.textfields[t].editor === textfield) {\n            return\n          }\n        }\n        // this function makes sure that either the\n        // textfieldt event is executed, or the yjs observer is executed\n        var token = true\n        function mutualExcluse (f) {\n          if (token) {\n            token = false\n            try {\n              f()\n            } catch (e) {\n              token = true\n              throw new Error(e)\n            }\n            token = true\n          }\n        }\n\n        var self = this\n        textfield.value = this.toString()\n\n        var createRange, writeRange, writeContent, getContent\n        if (textfield.selectionStart != null && textfield.setSelectionRange != null) {\n          createRange = function (fix) {\n            var left = textfield.selectionStart\n            var right = textfield.selectionEnd\n            if (fix != null) {\n              left = fix(left)\n              right = fix(right)\n            }\n            return {\n              left: left,\n              right: right\n            }\n          }\n          writeRange = function (range) {\n            writeContent(self.toString())\n            textfield.setSelectionRange(range.left, range.right)\n          }\n          writeContent = function (content) {\n            textfield.value = content\n          }\n          getContent = function () {\n            return textfield.value\n          }\n        } else {\n          createRange = function (fix) {\n            var range = {}\n            var s = domRoot.getSelection()\n            var clength = textfield.textContent.length\n            range.left = Math.min(s.anchorOffset, clength)\n            range.right = Math.min(s.focusOffset, clength)\n            if (fix != null) {\n              range.left = fix(range.left)\n              range.right = fix(range.right)\n            }\n            var editedElement = s.focusNode\n            if (editedElement === textfield || editedElement === textfield.childNodes[0]) {\n              range.isReal = true\n            } else {\n              range.isReal = false\n            }\n            return range\n          }\n\n          writeRange = function (range) {\n            writeContent(self.toString())\n            var textnode = textfield.childNodes[0]\n            if (range.isReal && textnode != null) {\n              if (range.left < 0) {\n                range.left = 0\n              }\n              range.right = Math.max(range.left, range.right)\n              if (range.right > textnode.length) {\n                range.right = textnode.length\n              }\n              range.left = Math.min(range.left, range.right)\n              var r = document.createRange(); // eslint-disable-line\n              r.setStart(textnode, range.left)\n              r.setEnd(textnode, range.right)\n              var s = domRoot.getSelection(); // eslint-disable-line\n              s.removeAllRanges()\n              s.addRange(r)\n            }\n          }\n          writeContent = function (content) {\n            textfield.innerText = content\n            /*\n            var contentArray = content.replace(new RegExp('\\n', 'g'), ' ').split(' '); // eslint-disable-line\n            textfield.innerText = ''\n            for (var i = 0; i < contentArray.length; i++) {\n              var c = contentArray[i]\n              textfield.innerText += c\n              if (i !== contentArray.length - 1) {\n                textfield.innerHTML += '&nbsp;'\n              }\n            }\n            */\n          }\n          getContent = function () {\n            return textfield.innerText\n          }\n        }\n        writeContent(this.toString())\n\n        function yCallback (event) {\n          mutualExcluse(() => {\n            var oPos, fix\n            if (event.type === 'insert') {\n              oPos = event.index\n              fix = function (cursor) { // eslint-disable-line\n                if (cursor <= oPos) {\n                  return cursor\n                } else {\n                  cursor += 1\n                  return cursor\n                }\n              }\n              var r = createRange(fix)\n              writeRange(r)\n            } else if (event.type === 'delete') {\n              oPos = event.index\n              fix = function (cursor) { // eslint-disable-line\n                if (cursor < oPos) {\n                  return cursor\n                } else {\n                  cursor -= 1\n                  return cursor\n                }\n              }\n              r = createRange(fix)\n              writeRange(r)\n            }\n          })\n        }\n        this.observe(yCallback)\n\n        var textfieldObserver = function textfieldObserver () {\n          mutualExcluse(function () {\n            var r = createRange(function (x) { return x })\n            var oldContent = self.toString()\n            var content = getContent()\n            var diffs = diff(oldContent, content, r.left)\n            var pos = 0\n            for (var i = 0; i < diffs.length; i++) {\n              var d = diffs[i]\n              if (d[0] === 0) { // EQUAL\n                pos += d[1].length\n              } else if (d[0] === -1) { // DELETE\n                self.delete(pos, d[1].length)\n              } else { // INSERT\n                self.insert(pos, d[1])\n                pos += d[1].length\n              }\n            }\n          })\n        }\n        textfield.addEventListener('input', textfieldObserver)\n        this.textfields.push({\n          editor: textfield,\n          yCallback: yCallback,\n          eventListener: textfieldObserver\n        })\n      }\n      _destroy () {\n        this.unbindAll()\n        this.textfields = null\n        this.aceInstances = null\n        super._destroy()\n      }\n    }\n    Y.extend('Text', new Y.utils.CustomTypeDefinition({\n      name: 'Text',\n      class: YText,\n      struct: 'List',\n      initType: function * YTextInitializer (os, model) {\n        var _content = []\n        yield* Y.Struct.List.map.call(this, model, function (op) {\n          if (op.hasOwnProperty('opContent')) {\n            throw new Error('Text must not contain types!')\n          } else {\n            op.content.forEach(function (c, i) {\n              _content.push({\n                id: [op.id[0], op.id[1] + i],\n                val: op.content[i]\n              })\n            })\n          }\n        })\n        return new YText(os, model.id, _content)\n      },\n      createType: function YTextCreator (os, model) {\n        return new YText(os, model.id, [])\n      }\n    }))\n  })\n}\n\nmodule.exports = extend\nif (typeof Y !== 'undefined') {\n  extend(Y)\n}\n"],"sourceRoot":"/source/"}